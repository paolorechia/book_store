service: bookstore
provider:
  name: aws
  runtime: python3.8
  stage: dev
  region: us-east-1
  environment:
     DYNAMODB_TABLE: bookstore_table
     COGNITO_USERPOOL_NAME: ${self:provider.stage}_pool
     COGNITO_USERPOOL_CLIENT_NAME: ${self:provider.stage}_pool_client
     COGNITO_USERPOOL_API_CLIENT_NAME: ${self:provider.stage}_pool_api_client
     FRONTEND_BUCKET: ${self:provider.stage}_bucket.paolorechia.de
     WEB_DOMAIN: ${self:provider.stage}.paolorechia.de
     AUTH_DOMAIN: auth.paolorechia.de

  
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:Scan
        - dynamodb:Get
        - dynamodb:Delete
        - dynamodb:UpdateItem
        - dynamodb:Query
        - dynamodb:PutItem
      Resource:
        - arn:aws:dynamodb:us-east-1:*:table/${self:provider.environment.DYNAMODB_TABLE}


# CloudFormation Templates
resources:
  Resources:
    # DynamoDB Table Setup
    bookstoreTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        AttributeDefinitions: 
          - AttributeName: name
            AttributeType: S
          - AttributeName: author
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
          - AttributeName: author
            KeyType: RANGE
        ProvisionedThroughput: 
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1


  # Cognito Setup
    MyCognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:provider.environment.COGNITO_USERPOOL_NAME}
        Policies:
          PasswordPolicy:
            MinimumLength: 8
        UsernameAttributes:
          - email
        Schema:
          - AttributeDataType: String
            Name: email
            Required: false


    MyCognitoDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties: 
        CustomDomainConfig: 
           CertificateArn: ${file(.certificate)}
        Domain: ${self:provider.environment.AUTH_DOMAIN}
        UserPoolId: !Ref MyCognitoUserPool


    MyCognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: !Ref MyCognitoUserPool
        ClientName: ${self:provider.environment.COGNITO_USERPOOL_CLIENT_NAME}
        GenerateSecret: false
        SupportedIdentityProviders:
          - COGNITO
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthFlows:
          - code
          - implicit
        AllowedOAuthScopes:
          - email
          - openid
        CallbackURLs:
          - https://${self:provider.environment.WEB_DOMAIN}
        LogoutURLs:
          - https://${self:provider.environment.WEB_DOMAIN}


    MyCognitoUserPoolApiClientResourceServer:
      Type: AWS::Cognito::UserPoolResourceServer
      Properties: 
        Identifier: api
        Name: Api Server
        Scopes: 
          - ScopeDescription: Generic Description
            ScopeName: "generic"
        UserPoolId: !Ref MyCognitoUserPool


#    API Client, cannot be created in the same stack for some reason
#    MyCognitoUserPoolApiClient:
#      Type: AWS::Cognito::UserPoolClient
#      Properties:
#        UserPoolId: !Ref MyCognitoUserPool
#        ClientName: ${self:provider.environment.COGNITO_USERPOOL_API_CLIENT_NAME}
#        GenerateSecret: true
#        SupportedIdentityProviders:
#          - COGNITO
#        AllowedOAuthFlowsUserPoolClient: true
#        AllowedOAuthFlows:
#          - client_credentials
#        AllowedOAuthScopes:
#          - api/generic


    ApiGatewayAuthorizer:
      DependsOn:
        - ApiGatewayRestApi
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: cognito-authorizer
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [MyCognitoUserPool, Arn]


functions:
  get_books:
    handler: backend/handlers.get_books_handler
    events:
      - http:
          path: books
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  

  create_book:
    handler: backend/handlers.create_book_handler
    events:
      - http:
          path: books
          method: put
          request:
            schema:
              application/json: ${file(models/create_book.json)}


package:
  include:
    - backend/put_book.py
    - backend/lib/repository.py
  exclude:
    - node_modules/**
    - frontend/**
    - package-lock.json


plugins:
  - serverless-finch


custom:
  client:
    bucketName: ${self:provider.environment.FRONTEND_BUCKET}
    distributionFolder: frontend/build


#  This one deploys to bucket used as origin for a CloudFront distribution.
#  Requires manual cache invalidation to propagate updates.
#  client:
#    bucketName: mytest-123-bucket-321 # (see Configuration Parameters below)
#    distributionFolder: frontend/build
