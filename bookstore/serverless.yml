service: bookstore

plugins:
  - serverless-finch

provider:
  name: aws
  runtime: python3.8
  stage: dev
  region: us-east-1
  environment:
     DYNAMODB_TABLE: bookstore_table

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:Scan
        - dynamodb:Get
        - dynamodb:Delete
        - dynamodb:UpdateItem
        - dynamodb:Query
        - dynamodb:PutItem
      Resource:
        - arn:aws:dynamodb:us-east-1:*:table/${self:provider.environment.DYNAMODB_TABLE}

resources:
  Resources:
    bookstoreTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        AttributeDefinitions: 
          - AttributeName: name
            AttributeType: S
          - AttributeName: author
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
          - AttributeName: author
            KeyType: RANGE
        ProvisionedThroughput: 
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1

functions:
  get_books:
    handler: backend/handlers.get_books_handler
    events:
      - http:
          path: books
          method: get
  

  create_book:
    handler: backend/handlers.create_book_handler
    events:
      - http:
          path: books
          method: put
          request:
            schema:
              application/json: ${file(models/create_book.json)}


package:
  include:
    - backend/put_book.py
    - backend/lib/repository.py
  exclude:
    - node_modules/**
    - frontend/**
    - package-lock.json


custom:
  client:
    bucketName: test.paolorechia.de
    distributionFolder: frontend


#  This one deploys to CloudFront. Requires cache invalidation to propagate updates
#  client:
#    bucketName: mytest-123-bucket-321 # (see Configuration Parameters below)
#    distributionFolder: frontend
#    # [other configuration parameters] (see Configuration Parameters below)
