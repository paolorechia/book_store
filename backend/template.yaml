AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  book-store-app

  Book Store Serverless App

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    Runtime: python3.8

Parameters:
  CognitoUserPoolName:
    Type: String
    Default: DevPool
  
  CognitoUserPoolClientName:
    Type: String
    Default: DevPoolClient

  CognitoUserPoolApiClientName:
    Type: String
    Default: DevApiPoolClient

  DynamoDBTableName:
    Type: String
    Default: DevTable

  S3BucketName:
    Type: String
    Default: dev-bucket-321


Resources:
# API Config
  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Dev
      # Models:
      #   Book:
      #     required:
      #     - name
      #     - author
      #     type: object
      #     properties:
      #       name:
      #         type: string
      #         format: int64
      #       author:
      #         type: string
      #         description: author
      Cors: "'*'"
      Auth:
        DefaultAuthorizer: MyCognitoAuthorizer
        Authorizers:
          MyCognitoAuthorizer:
            UserPoolArn: !GetAtt MyCognitoUserPool.Arn
            Identity:
              Header: Authorization
            AuthorizationScopes:
              - api/generic
            UsagePlan:
              UsagePlanName: DevUsagePlan
              CreateUsagePlan: PER_API
              Description: Usage plan for this API
              Quota:
                Limit: 100
                Period: MONTH
              Throttle:
                BurstLimit: 100
                RateLimit: 10


  BookModel:
    Type: 'AWS::ApiGateway::Model'
    Properties:
      RestApiId: !Ref MyApi
      ContentType: application/json
      Description: Schema for Books
      Name: BookModel
      Schema:
        $schema: 'http://json-schema.org/draft-04/schema#'
        title: BookSchema
        type: object
        required:
        - name
        - author
        properties:
          name:
            type: string
          author:
            type: string

  ApiRequestBodyValidator:
    Type: AWS::ApiGateway::RequestValidator
    Properties: 
      Name: body
      RestApiId: !Ref MyApi
      ValidateRequestBody: true
      ValidateRequestParameters: false
      
  CloudResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref MyApi
      ParentId: !GetAtt
        - MyApi
        - RootResourceId
      PathPart: cloud

  CloudPostMethod:
    Type: AWS::ApiGateway::Method
    Properties: 
      ApiKeyRequired: false
      AuthorizationScopes: 
        - api/generic
      AuthorizationType: COGNITO_USER_POOLS
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TestCloudFormationFunction.Arn}/invocations
      responses:
        default:
          statusCode: 200
      MethodResponses:
        - StatusCode: 200
      RequestModels:
        json/application : !Ref BookModel
      RequestValidatorId: !Ref ApiRequestBodyValidator
      ResourceId: !Ref CloudResource
      RestApiId: !Ref MyApi


# Cognito Setup
  MyCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Ref CognitoUserPoolName
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false

  MyCognitoDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties: 
        Domain: mytest-321
        UserPoolId: !Ref MyCognitoUserPool

  MyCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref MyCognitoUserPool
      ClientName: !Ref CognitoUserPoolClientName
      GenerateSecret: false
      SupportedIdentityProviders:
        - COGNITO
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
      CallbackURLs:
        - https://mysite-321.s3.amazonaws.com/index.html
      LogoutURLs:
        - https://mysite-321.s3.amazonaws.com/index.html

  MyCognitoUserPoolApiClientResourceServer:
    Type: AWS::Cognito::UserPoolResourceServer
    Properties: 
      Identifier: api
      Name: Api Server
      Scopes: 
        - ScopeDescription: Generic Description
          ScopeName: "generic"
      UserPoolId: !Ref MyCognitoUserPool

  MyCognitoUserPoolApiClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref MyCognitoUserPool
      ClientName: !Ref CognitoUserPoolApiClientName
      GenerateSecret: true
      SupportedIdentityProviders:
        - COGNITO
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - client_credentials
      AllowedOAuthScopes:
        - api/generic

# DynamoDB
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions: 
        - AttributeName: name
          AttributeType: S
        - AttributeName: author
          AttributeType: S
      KeySchema:
        - AttributeName: name
          KeyType: HASH
        - AttributeName: author
          KeyType: RANGE
      ProvisionedThroughput: 
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
      TableName: !Ref DynamoDBTableName


# S3 Photo Bucket
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3BucketName
      PublicAccessBlockConfiguration: 
        RestrictPublicBuckets: true

# Functions
  # HelloWorldFunction:
  #   Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
  #   Properties:
  #     CodeUri: hello_world/
  #     Handler: app.lambda_handler
  #     Events:
  #       HelloWorld:
  #         Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
  #         Properties:
  #           RestApiId: !Ref MyApi
  #           Path: /hello
  #           Method: get

  # HelloDynamoFunction:
  #   Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
  #   Properties:
  #     CodeUri: dynamo/
  #     Handler: handlers.test_lambda_handler
  #     Events:
  #       HelloWorld:
  #         Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
  #         Properties:
  #           RestApiId: !Ref MyApi
  #           Path: /dynamo
  #           Method: post

  # CreateBookFunction:
  #   Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
  #   Properties:
  #     CodeUri: dynamo/
  #     Handler: handlers.put_item_handler
  #     Events:
  #       HelloWorld:
  #         Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
  #         Properties:
  #           RestApiId: !Ref MyApi
  #           Path: /book
  #           Method: post

  # TestSwaggerFunction:
  #   Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
  #   Properties:
  #     CodeUri: swagger_example/
  #     Handler: handlers.handler
  #     Events:
  #       HelloWorld:
  #         Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
  #         Properties:
  #           RestApiId: !Ref MyApi
  #           Path: /swagger
  #           Method: post
  #           # RequestModel:
  #           #   Model: Book
  #           #   Required: true

  TestCloudFormationFunction:
    Type: "AWS::Lambda::Function"
    Properties: 
      Handler: "index.handler"
      Role: "arn:aws:iam::743396504149:role/LambdaBasicExecutionRole"
      Code: 
        ZipFile: test.zip
      Runtime: "python3.8"
      Timeout: 5

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api

  CloudResourceId:
    Description: "Test"
    Value: !Ref CloudResource

  CognitoUserPoolId:
    Description: "Cognito User Pool Id"
    Value: !Ref MyCognitoUserPool

  CognitoUserPoolClientId:
    Description: "Cognito User Pool Client Id"
    Value: !Ref MyCognitoUserPoolClient

  CognitoUserPoolClientApiId:
    Description: "Cognito User Pool Client Api Id"
    Value: !Ref MyCognitoUserPoolApiClient

  DynamoDBTableName:
    Description: "Dynamo Table Name"
    Value: !Ref DynamoDBTable

  S3Bucket:
    Description: "S3Bucket"
    Value: !Ref S3Bucket

  HelloWorldApi:
    Description: "API Gateway endpoint URL for Dev stage for Hello World function"
    Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/Dev/hello/"

  # HelloWorldFunction:
  #   Description: "Hello World Lambda Function ARN"
  #   Value: !GetAtt HelloWorldFunction.Arn

  # HelloWorldFunctionIamRole:
  #   Description: "Implicit IAM Role created for Hello World function"
  #   Value: !GetAtt HelloWorldFunctionRole.Arn

